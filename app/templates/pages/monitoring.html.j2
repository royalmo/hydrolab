{% extends 'base/logged_in.html.j2' %}

{% block body %}
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.4.0"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/date-fns/1.30.1/date_fns.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script>var charts = {humidity: {}, temperature: {}, battery: {}, snr: {}}</script>

<script>
  function getRandomColor() {
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (var i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }

  function hasData(sensor) {
      return sensor.y_axis && sensor.y_axis.length > 0;
    }

  function updateCharts() {
    
    var timeRange = document.getElementById('timeRangeSelect').value;
    var newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + '?time_range=' + timeRange;
    window.history.pushState({path:newurl},'',newurl);

    fetch('/monitoring/raw?time_range=' + timeRange)
      .then(response => response.json())
      .then(data => {
        data.forEach(monitor => {
          var chart = charts[monitor.key];
          var sensorData = monitor.sensor_data;

          var newDatasets = sensorData.map(sensor => ({
            label: sensor.sensor_name,
            data: sensor.y_axis.map((y, index) => ({x: sensor.x_axis[index], y: y})),
            borderColor: hasData(sensor) ? getRandomColor() : '#808080',
            fill: false
          }));

          chart.data.labels = sensorData.length > 0 ? sensorData[0].x_axis : [];
          chart.data.datasets = newDatasets;

          if (monitor.min_value !== 'undefined') {
            chart.options.scales.y.min = monitor.min_value;
          }
          if (monitor.max_value !== 'undefined') {
            chart.options.scales.y.max = monitor.max_value;
          }

          chart.update();
        });
      })
      .catch(error => {
        console.error('Error updating charts:', error);
      });
  }

  // Call updateCharts on page load to initialize the charts
  document.addEventListener('DOMContentLoaded', updateCharts);
</script>

<div class="flex flex-col md:flex-row justify-between w-3/5 md:w-3/5 mx-auto p-2 rounded-lg bg-white opacity-80">
    <div class="flex flex-col border border-black bg-gray-100 rounded-md w-full md:w-1/3 m-1">
    <h1 class="font-bold mx-auto">Litres Regats</h1>
    <div class="flex flex-row">
      <div class=" flex flex-col w-2/3 mx-auto my-2 items-center">
        <h2 class="font-bold text-3xl"> 27L </h2>
        <div class="relative bg-gray-500 w-1/3 h-[2px]"></div>
      </div>
    </div>
  </div>
      <div class="flex flex-col border border-black bg-gray-100 rounded-md w-full md:w-1/3 m-1">
    <h1 class="font-bold mx-auto">Temperatura Mitjana</h1>
      <div class="flex flex-row">
      <div class=" flex flex-col w-2/3 mx-auto my-2 items-center">
        <h2 class="font-bold text-3xl"> 19C </h2>
        <div class="relative bg-gray-500 w-1/3 h-[2px]"></div>
      </div>
    </div>
  </div>
      <div class="flex flex-col border border-black bg-gray-100 rounded-md w-full md:w-1/3 m-1">
    <h1 class="font-bold mx-auto">Lorem</h1>
      <div class="flex flex-row">
      <div class=" flex flex-col w-2/3 mx-auto my-2 items-center">
        <h2 class="font-bold text-3xl"> Ipsum </h2>
        <div class="relative bg-gray-500 w-1/3 h-[2px]"></div>
      </div>
    </div>
  </div>
      <div class="flex flex-col border border-black bg-gray-100 rounded-md w-full md:w-1/3 m-1">
    <div class="flex flex-col justify-center items-center h-full">
      <form id="timeRangeForm" class="text-center">
        <label for="timeRangeSelect" class="block text-sm font-bold mb-2">Select Time Range:</label>
        <select name="timeRange" id="timeRangeSelect" class="text-center rounded" onchange="updateCharts()" >
          <option value="1h">Last Hour</option>
          <option value="24h" selected>Last 24 Hours</option>
          <option value="7d">Last 7 Days</option>
          <option value="30d">Last 30 Days</option>
        </select>
      </form>
    </div>
  </div>
</div>

{% for eachmonitor in monitors %}

<article id="monitor_frame_{{ eachmonitor.id|int }}" class="bg-white w-full max-w-[1250px] border-black border-2 rounded-md p-2 my-4 mx-auto md:p-7 cursor-pointer">
  <a href="{{ url_for( '.edit' , id=eachmonitor.id|int ) }}">
    <h2 class="text-2xl font-bold text-gray-500">{{ eachmonitor.title|e }}</h2>
    <div class="relative w-full"> 
      <canvas style="margin:1.5em;" id="monitor_{{ eachmonitor.key|e }}"></canvas>
    </div>
  </a>
</article>


<script>
  var sensorData = {{ eachmonitor.sensor_data | tojson }};
  
  var datasets = sensorData.map(function(data) {
    return {
      label: data.sensor_name, // Removed "Sensor" prefix to use it in the legend title
      data: data.y_axis,
      borderColor: hasData(data) ? getRandomColor() : '#808080',
      fill: false,
    };
  });
  
  var ctx = document.getElementById('monitor_{{ eachmonitor.key|e }}').getContext('2d');
  var chart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: sensorData.length > 0 ? sensorData[0].x_axis : [],
      datasets: datasets
    },
    options: {
      plugins: {
        legend: {
          display: true,
          position: 'right',
          labels: {
            // Use a custom function to generate legend item
            generateLabels: function(chart) {
              return chart.data.datasets.map(function(dataset, i) {
                return {
                  text: dataset.label,
                  fillStyle: dataset.borderColor,
                  font: {
                    size: 8 // Smaller font size for eui numbers
                  }
                };
              });
            }
          },
          title: {
            display: true,
            text: 'Sensors', // The legend header
            color: '#666',
            font: {
              size: 12,
              weight: 'bold'
            }
          }
        }
      },
      scales: {
        y: {
          min: {{ eachmonitor.min_value }},
          max: {{ eachmonitor.max_value }}
        },
        x: {
          type: 'time',
          time: {
            parser: "yyyy-MM-dd HH:mm:ss",
          },
          ticks: {
            autoSkip: true,
            maxRotation: 0,
            autoSkipPadding: 30
          },
        }
      }
    }
  });

    charts['{{eachmonitor['key']}}'] = chart;

  </script>

{% endfor %}

<script class="text-green-600" src="{{ url_for('static', filename='js/monitor_update.js') }}"></script>
{% endblock %}
